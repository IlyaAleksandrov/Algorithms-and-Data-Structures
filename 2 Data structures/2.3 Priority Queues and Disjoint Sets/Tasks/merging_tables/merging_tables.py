# Problem Introduction
# In this problem, your goal is to simulate a sequence of merge operations with tables in a database.

# Task. There are ùëõ tables stored in some database. The tables are numbered from 1 to ùëõ. All tables share
# the same set of columns. Each table contains either several rows with real data or a symbolic link to
# another table. Initially, all tables contain data, and ùëñ-th table has ùëüùëñ rows. You need to perform ùëö of
# the following operations:
# 1. Consider table number ùëëùëíùë†ùë°ùëñùëõùëéùë°ùëñùëúùëõùëñ. Traverse the path of symbolic links to get to the data. That
# is,
# while ùëëùëíùë†ùë°ùëñùëõùëéùë°ùëñùëúùëõùëñ contains a symbolic link instead of real data do
# ùëëùëíùë†ùë°ùëñùëõùëéùë°ùëñùëúùëõùëñ ‚Üê symlink(ùëëùëíùë†ùë°ùëñùëõùëéùë°ùëñùëúùëõùëñ)
# 2. Consider the table number ùë†ùëúùë¢ùëüùëêùëíùëñ and traverse the path of symbolic links from it in the same
# manner as for ùëëùëíùë†ùë°ùëñùëõùëéùë°ùëñùëúùëõùëñ.
# 3. Now, ùëëùëíùë†ùë°ùëñùëõùëéùë°ùëñùëúùëõùëñ and ùë†ùëúùë¢ùëüùëêùëíùëñ are the numbers of two tables with real data. If ùëëùëíùë†ùë°ùëñùëõùëéùë°ùëñùëúùëõùëñ Ã∏=
# ùë†ùëúùë¢ùëüùëêùëíùëñ, copy all the rows from table ùë†ùëúùë¢ùëüùëêùëíùëñ to table ùëëùëíùë†ùë°ùëñùëõùëéùë°ùëñùëúùëõùëñ, then clear the table ùë†ùëúùë¢ùëüùëêùëíùëñ
# and instead of real data put a symbolic link to ùëëùëíùë†ùë°ùëñùëõùëéùë°ùëñùëúùëõùëñ into it.
# 4. Print the maximum size among all ùëõ tables (recall that size is the number of rows in the table).
# If the table contains only a symbolic link, its size is considered to be 0.
# See examples and explanations for further clarifications.

# Input Format. The first line of the input contains two integers ùëõ and ùëö ‚Äî the number of tables in the
# database and the number of merge queries to perform, respectively.
# The second line of the input contains ùëõ integers ùëüùëñ ‚Äî the number of rows in the ùëñ-th table.
# Then follow ùëö lines describing merge queries. Each of them contains two integers ùëëùëíùë†ùë°ùëñùëõùëéùë°ùëñùëúùëõùëñ and
# ùë†ùëúùë¢ùëüùëêùëíùëñ ‚Äî the numbers of the tables to merge.

# Constraints. 1 ‚â§ ùëõ,ùëö ‚â§ 100 000; 0 ‚â§ ùëüùëñ ‚â§ 10 000; 1 ‚â§ ùëëùëíùë†ùë°ùëñùëõùëéùë°ùëñùëúùëõùëñ, ùë†ùëúùë¢ùëüùëêùëíùëñ ‚â§ ùëõ.

# Output Format. For each query print a line containing a single integer ‚Äî the maximum of the sizes of all
# tables (in terms of the number of rows) after the corresponding operation.

import sys


# —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
def getParent(i):
    if i != parent[i]:
        parent[i] = getParent(parent[i])
    return parent[i]


def merge(destination, source):
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    realDestination, realSource = getParent(destination), getParent(source)
    if realDestination == realSource:
        return False
    # –≤—ã–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–∞–Ω–≥–æ–º –∏ —Ü–µ–ø–ª—è–µ–º –º–µ–Ω—å—à–µ–µ –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É —Ä–æ–¥–∏—Ç–µ–ª—è
    if rank[realSource] > rank[realDestination]:
        parent[realDestination] = realSource
        lines[realSource] += lines[realDestination]
        lines[realDestination] = 0
    else:
        parent[realSource] = realDestination
        lines[realDestination] += lines[realSource]
        lines[realSource] = 0
        if rank[realSource] == rank[realDestination]:
            rank[realDestination] += 1
    return True


n, m = map(int, sys.stdin.readline().split())
lines = list(map(int, sys.stdin.readline().split()))
# –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–Ω–≥–æ–≤ –¥–ª—è —É–∑–ª–≤, –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ä–∞–Ω–≥ —É –≤—Å–µ—Ö 1, —Ç.–∫. —É–∑–ª—ã –Ω–µ —Å–≤—è–∑–∞–Ω—ã
rank = [1] * n
parent = list(range(0, n))
ans = max(lines)
for i in range(m):
    destination, source = map(int, sys.stdin.readline().split())
    merge(destination - 1, source - 1)
    ans = max(ans, lines[parent[destination - 1]], lines[parent[source - 1]])
    print(ans)
