# Problem Introduction
# Another problem that can be solved efficiently with tries is the following.
# Multiple Pattern Matching Problem
# Find all occurrences of a collection of patterns in a text.

# Input: A string Text and a collection Patterns containing (shorter) strings.
# Output: All starting positions in Text where a string from Patterns appears as a substring.
# Again, the multiple pattern matching problem has many applications like highlighting programming
# language keywords (like if, else, elif) in your favorite IDE (see the screenshot below) and locating reads
# in a reference genome.

# Input Format. The first line of the input contains a string Text, the second line contains an integer ùëõ,
# each of the following ùëõ lines contains a pattern from Patterns = {ùëù1, . . . , ùëùùëõ}.

# Constraints. 1 ‚â§ |Text| ‚â§ 10 000; 1 ‚â§ ùëõ ‚â§ 5 000; 1 ‚â§ |ùëùùëñ| ‚â§ 100 for all 1 ‚â§ ùëñ ‚â§ ùëõ; all strings contain only
# symbols A, C, G, T; no ùëùùëñ is a prefix of ùëùùëó for all 1 ‚â§ ùëñ Ã∏= ùëó ‚â§ ùëõ.

# Output Format. All starting positions in Text where a string from Patterns appears as a substring in
# increasing order (assuming that Text is a 0-based array of symbols).

import sys


def solve(text, n, patterns):
    result = []

    # —Å—Ç—Ä–æ–∏–º —Å—É—Ñ—Ñ–∏–∫—Å–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    def build_trie(patterns):
        tree = {0: {}}
        count = 0
        for p in patterns:
            currentNode = 0
            # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
            for i in range(len(p)):
                currentSymbol = p[i]
                # –µ—Å–ª–∏ –≤ –¥–µ—Ä–µ–≤–µ –Ω–∞ –º–µ—Å—Ç–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞ —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª, —Ç–æ –∏–¥–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É
                if tree[currentNode].get(currentSymbol) != None:
                    currentNode = tree[currentNode].get(currentSymbol)
                # –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ –¥–æ–±–∞–≤–ª—è–µ–º
                else:
                    tree[count + 1] = {}
                    tree[currentNode][currentSymbol] = count + 1
                    currentNode = count + 1
                    count += 1
            # –≤ –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –¥–æ–±–∞–≤–ª—è–µ–º 0, –∫–∞–∫ —Å–∏–º–≤–æ–ª –æ–∫–æ–Ω—á–∞–Ω–∏—è
            tree[currentNode] = {0: 0}
        return tree

    def prefixTreeMatching(text, trie):
        count = 0
        symbol = text[count]
        v = trie[0]
        while True:
            # –µ—Å–ª–∏ –º—ã –¥–æ–±—Ä–∞–ª–∏—Å—å –¥–æ —É–∑–ª–∞ —Å 0, —Ç–æ –º—ã –¥–æ–±—Ä–∞–ª–∏—Å—å –¥–æ –∫–æ–Ω—Ü–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞, –º–æ–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 1 (—É—Å–ø–µ—Ö)
            if v.get(0) != None:
                return 1
            # –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Å–∏–º–≤–æ–ª –∏–º–µ–µ—Ç—Å—è –≤ –¥–µ—Ä–µ–≤–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É, –∫—Ä–æ–≤–µ—Ä—è—è —á—Ç–æ –º—ã –Ω–µ –≤—ã—à–ª–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —Ç–µ–∫—Å—Ç–∞
            elif v.get(symbol) != None:
                v = trie[v.get(symbol)]
                count += 1
                if count <= x:
                    symbol = text[count]
                else:
                    return 0
            else:
                return 0

    trie = build_trie(patterns)
    symbNumb = 0
    x = len(text)
    # –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–∞ —Å–∏–º–≤–æ–ª –∫–æ–Ω—Ü–∞ —Ç–µ–∫—Å—Ç–∞
    text += "0"
    # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–≤–æ–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å —Å—É—Ñ—Ñ–∏–∫—Å–Ω—ã–º –¥–µ—Ä–µ–≤–æ–º
    while symbNumb != x:
        ans = prefixTreeMatching(text, trie)
        if ans == 1:
            result.append(symbNumb)
        text = text[1:]
        symbNumb += 1
    return result


text = sys.stdin.readline().strip()
n = int(sys.stdin.readline().strip())
patterns = []
for i in range(n):
    patterns += [sys.stdin.readline().strip()]
ans = solve(text, n, patterns)

sys.stdout.write(' '.join(map(str, ans)) + '\n')
